/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package accesscontrolsystem;

import com.sun.xml.internal.ws.util.StringUtils;
import java.awt.Color;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author Avadh
 */
public class AdminMenu extends javax.swing.JFrame {

    /**
     * Creates new form AdminMenu
     */
    public AdminMenu() {
        initComponents();
        
        createList(userList);
        createFileList(fileList);
        
        jLabel1.setText("User: " + LoginCurrent.username);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        logButton = new javax.swing.JButton();
        browseButton = new javax.swing.JButton();
        usersButton = new javax.swing.JButton();
        policyButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        welcomeTab = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        browseTab = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        addFileButton = new javax.swing.JButton();
        openFileButton = new javax.swing.JButton();
        setFileRoleButton = new javax.swing.JButton();
        removeFileButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        policyTab = new javax.swing.JPanel();
        logTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logText = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        usersTab = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();
        registerButton = new javax.swing.JButton();
        removeUserButton = new javax.swing.JButton();
        editRoleButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        changeRoleButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(124, 124, 124));

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(240, 240, 240));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("jLabel1");

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        logButton.setText("Log");
        logButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logButtonActionPerformed(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        usersButton.setText("Users");
        usersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersButtonActionPerformed(evt);
            }
        });

        policyButton1.setText("Policies");
        policyButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                policyButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(browseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usersButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(policyButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(policyButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logoutButton)
                .addGap(21, 21, 21))
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel5.setText("Welcome");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Use the buttons on the left panel to navigate through the system");

        javax.swing.GroupLayout welcomeTabLayout = new javax.swing.GroupLayout(welcomeTab);
        welcomeTab.setLayout(welcomeTabLayout);
        welcomeTabLayout.setHorizontalGroup(
            welcomeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(welcomeTabLayout.createSequentialGroup()
                .addGroup(welcomeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(welcomeTabLayout.createSequentialGroup()
                        .addGap(304, 304, 304)
                        .addComponent(jLabel5))
                    .addGroup(welcomeTabLayout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jLabel6)))
                .addContainerGap(132, Short.MAX_VALUE))
        );
        welcomeTabLayout.setVerticalGroup(
            welcomeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(welcomeTabLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(jLabel5)
                .addGap(44, 44, 44)
                .addComponent(jLabel6)
                .addContainerGap(241, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Welcome", welcomeTab);

        fileList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(fileList);

        addFileButton.setText("Add File...");
        addFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileButtonActionPerformed(evt);
            }
        });

        openFileButton.setText("Open File");
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });

        setFileRoleButton.setText("Change Access");
        setFileRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setFileRoleButtonActionPerformed(evt);
            }
        });

        removeFileButton.setText("Remove");
        removeFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFileButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout browseTabLayout = new javax.swing.GroupLayout(browseTab);
        browseTab.setLayout(browseTabLayout);
        browseTabLayout.setHorizontalGroup(
            browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(browseTabLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(browseTabLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addGroup(browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(openFileButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(setFileRoleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, browseTabLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(167, 167, 167))))
        );
        browseTabLayout.setVerticalGroup(
            browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(browseTabLayout.createSequentialGroup()
                .addGroup(browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(browseTabLayout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addGroup(browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(removeFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(setFileRoleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(browseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(openFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(browseTabLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Browse", browseTab);

        javax.swing.GroupLayout policyTabLayout = new javax.swing.GroupLayout(policyTab);
        policyTab.setLayout(policyTabLayout);
        policyTabLayout.setHorizontalGroup(
            policyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 772, Short.MAX_VALUE)
        );
        policyTabLayout.setVerticalGroup(
            policyTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 445, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Policies", policyTab);

        logText.setColumns(20);
        logText.setRows(5);
        jScrollPane1.setViewportView(logText);

        jButton1.setText("Today");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Past Week");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("All");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout logTabLayout = new javax.swing.GroupLayout(logTab);
        logTab.setLayout(logTabLayout);
        logTabLayout.setHorizontalGroup(
            logTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logTabLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(logTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(logTabLayout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        logTabLayout.setVerticalGroup(
            logTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, logTabLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(logTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );

        jTabbedPane1.addTab("Log", logTab);

        userList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(userList);

        registerButton.setText("Register User");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        removeUserButton.setText("Remove User");
        removeUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeUserButtonActionPerformed(evt);
            }
        });

        editRoleButton.setText("Edit Roles");
        editRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRoleButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Users");

        changeRoleButton.setText("Change Role");
        changeRoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeRoleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout usersTabLayout = new javax.swing.GroupLayout(usersTab);
        usersTab.setLayout(usersTabLayout);
        usersTabLayout.setHorizontalGroup(
            usersTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usersTabLayout.createSequentialGroup()
                .addGroup(usersTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(usersTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(usersTabLayout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(usersTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(registerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(removeUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(editRoleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(changeRoleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34))
        );
        usersTabLayout.setVerticalGroup(
            usersTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(usersTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(removeUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(changeRoleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editRoleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(usersTabLayout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Users", usersTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void init() throws SQLException {
        logText.setText(null);
        ArrayList<String> log = null;
        try {
            log = logData(3);
        } catch (SQLException ex) {
            Logger.getLogger(EmployeeMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        for (String a : log) {
            logText.append(a + "\n");
        }
    }
    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:

        LoginForm login = new LoginForm();
        Logout.logOut(this, login);
        Logout.updateLog(LoginCurrent.username, LoginCurrent.userType);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void logButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logButtonActionPerformed
        // TODO add your handling code here:

        jTabbedPane1.setSelectedIndex(3);
    }//GEN-LAST:event_logButtonActionPerformed

    private void usersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersButtonActionPerformed
        // TODO add your handling code here:
        
        jTabbedPane1.setSelectedIndex(4);
    }//GEN-LAST:event_usersButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // TODO add your handling code here:
        
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_browseButtonActionPerformed

    private void removeUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeUserButtonActionPerformed
        // TODO add your handling code here:
        AccessControlSystem program  = new AccessControlSystem();
                
        try {
            DefaultListModel m = (DefaultListModel) userList.getModel();
            String value = userList.getSelectedValue();
            System.out.println(value);
            
            if (value.contains(" ")) {
                value = value.substring(0, value.indexOf(" "));
            }
            
            Connection conn = program.DBConnect();
            String query = "DELETE FROM login WHERE "
                    + "Username = '" + value + "'";
            
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.execute();
            stmt.close();
            
            m.remove(userList.getSelectedIndex());
        }
        catch (SQLException e){
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_removeUserButtonActionPerformed

    private void editRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRoleButtonActionPerformed
        // TODO add your handling code here:
        new editRoleForm().setVisible(true);
    }//GEN-LAST:event_editRoleButtonActionPerformed

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        // TODO add your handling code here:
        
        new RegisterForm().setVisible(true);
    }//GEN-LAST:event_registerButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        logText.setText(null);
        ArrayList<String> log = null;
        try {
            log = logData(1);
        } catch (SQLException ex) {
            Logger.getLogger(EmployeeMenu.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (String a : log) {
            logText.append(a + "\n");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        logText.setText(null);
        ArrayList<String> log = null;
        try {
            log = logData(2);
        } catch (SQLException ex) {
            Logger.getLogger(EmployeeMenu.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (String a : log) {
            logText.append(a + "\n");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        logText.setText(null);
        ArrayList<String> log = null;
        try {
            log = logData(2);
        } catch (SQLException ex) {
            Logger.getLogger(EmployeeMenu.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (String a : log) {
            logText.append(a + "\n");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void changeRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeRoleButtonActionPerformed
        // TODO add your handling code here:
        
        String text = userList.getSelectedValue();
        String[] section = text.split("\\s+");
        
        String user = section[0];
        
        ChangeRole.user = user;
        if (user != "") {
            new ChangeRoleForm().setVisible(true);
        }
        else {
            JOptionPane.showMessageDialog(this, "Error: Please select a user to"
                    + "update.");
        }
    }//GEN-LAST:event_changeRoleButtonActionPerformed

    private void addFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        int val = chooser.showOpenDialog(this);

        if (val == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            String dir = System.getProperty("user.dir");
            String fileName = file.getName();
            String type = "";
            int index = fileName.lastIndexOf(".");

            if (index > 0) {
                type = fileName.substring(index + 1);
            }

            System.out.println(type);
            if (type.equals("txt")) {
                System.out.println("success");
                try {
                    FileManager manager = new FileManager();

                    manager.addFile(this, file, fileName, dir);
                    new FileRole(fileName).setVisible(true);
                }
                catch (Exception e){
                    System.out.println("File access failed: " + e);
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "Invalid File Type: Please "
                    + "choose select a text file");
            }
        }
        else {
            System.out.println("No file chosen");
        }
    }//GEN-LAST:event_addFileButtonActionPerformed

    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        // TODO add your handling code here:

        AccessControlSystem program  = new AccessControlSystem();

        String userRole = "";
        String selectedRole = "";
        String fileName = "";

        if (!fileList.isSelectionEmpty()) {
            FileManager manager = new FileManager();
            DefaultListModel m = (DefaultListModel) fileList.getModel();
            String value = fileList.getSelectedValue();

            if (value.contains("      ")) {
                selectedRole = value.substring(value.lastIndexOf(" ") + 1);
                selectedRole = selectedRole.replaceAll("\\s+","");
                fileName = value.substring(0, value.indexOf("      "));
            }

        }
        else {
            JOptionPane.showMessageDialog(this, "File Not Chosen: Please ensure "
                + "that a file has been selected");
        }

        try {
            Connection conn = program.DBConnect();

            String getRole = "SELECT Role FROM login WHERE Username = "
            + "'" + LoginCurrent.username + "'";
            PreparedStatement stmt = conn.prepareStatement(getRole);
            ResultSet result = stmt.executeQuery();

            while (result.next()) {
                userRole = result.getString("Role");
            }

        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }

        if ((userRole.compareTo(selectedRole) == 0)) {
            openFile(fileName);
        }
        else {
            JOptionPane.showMessageDialog(this, "No Access: This account does "
                + "not have access to this resource");
        }
    }//GEN-LAST:event_openFileButtonActionPerformed

    private void openFile(String fileName) {
        String directory = System.getProperty("user.dir");
        directory = directory + "\\files\\" + fileName;
        System.out.println(directory);
        
        String execute = "rundll32 url.dll,FileProtocolHandler ";
        
        File file = new File(directory);
        
        try {
            if(file.exists()) {
                file.setReadOnly();
                Process process = Runtime.getRuntime().exec(execute + directory);
                process.waitFor();
            }
            else {
                
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e);
        }
    }
    
    private void setFileRoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setFileRoleButtonActionPerformed
        // TODO add your handling code here:

        if (!fileList.isSelectionEmpty()) {
            String value = fileList.getSelectedValue();
            if (value.contains("      ")) {
                value = value.substring(0, value.indexOf("      "));
            }
            new FileRole(value).setVisible(true);
        }
        else {
            JOptionPane.showMessageDialog(this, "File Not Chosen: Please ensure "
                + "that a file has been selected");
        }

    }//GEN-LAST:event_setFileRoleButtonActionPerformed

    private void removeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFileButtonActionPerformed
        // TODO add your handling code here:

        AccessControlSystem program  = new AccessControlSystem();

        if (!fileList.isSelectionEmpty()) {
            try {
                FileManager manager = new FileManager();
                DefaultListModel m = (DefaultListModel) fileList.getModel();
                String value = fileList.getSelectedValue();
                System.out.println(value);

                if (value.contains("      ")) {
                    value = value.substring(0, value.indexOf("      "));
                }

                System.out.println(value);

                Connection conn = program.DBConnect();
                String query = "DELETE FROM resource WHERE "
                + "FileName = '" + value + "'";

                PreparedStatement stmt = conn.prepareStatement(query);
                stmt.execute();
                stmt.close();

                m.remove(fileList.getSelectedIndex());

                manager.removeFile(value);
            }
            catch (SQLException e){
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "File Not Chosen: Please ensure "
                + "that a file has been selected");
        }

    }//GEN-LAST:event_removeFileButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        createFileList(fileList);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void policyButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_policyButton1ActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(2);
        GraphDraw draw = new GraphDraw();
        String currentUser = LoginCurrent.username;
        String userRole = "";
        ArrayList<String> files = new ArrayList<>();

        AccessControlSystem program = new AccessControlSystem();
        try {
            Connection conn = program.DBConnect();
            String query = "SELECT Role From login WHERE "
            + "Username = '" + currentUser + "'";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet result = stmt.executeQuery();

            while (result.next()) {
                userRole = result.getString("Role");
            }
        }
        catch (SQLException e) {
            System.out.println("Error: " + e);
        }

        try {
            Connection conn = program.DBConnect();
            String query = "SELECT fileName From resource WHERE "
            + "Role = '" + userRole + "'";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet result = stmt.executeQuery();

            while (result.next()) {
                files.add(result.getString("fileName"));
            }
        }
        catch (SQLException e) {
            System.out.println("Error: " + e);
        }

        Node user = new Node();
        user.setDisplayName(currentUser);
        user.setColor(Color.BLACK);
        user.setPosition(new Node.Position(100, 100));
        draw.addNode(user);

        Node category = new Node();
        category.setDisplayName(userRole);
        category.setColor(Color.GREEN);
        category.setPosition(new Node.Position(200, 100));
        draw.addNode(category);

        Edge e1 = new Edge(user, category);
        e1.setFocussed(true);
        e1.setColor(Color.BLACK);
        draw.addEdge(e1);

        Node action = new Node();
        action.setDisplayName("Read");
        action.setColor(Color.BLUE);
        action.setPosition(new Node.Position(300, 100));
        draw.addNode(action);

        Edge e2 = new Edge(category, action);
        e2.setFocussed(true);
        e2.setColor(Color.BLACK);
        draw.addEdge(e2);

        int pos = 0;

        for (int i = 0; i < files.size(); i++) {
            String fileName = files.get(i);

            Node file = new Node();
            file.setDisplayName(fileName);
            file.setColor(Color.BLUE);
            file.setPosition(new Node.Position(400, pos));
            draw.addNode(file);

            Edge e3 = new Edge(action, file);
            e3.setFocussed(true);
            e3.setColor(Color.BLACK);
            draw.addEdge(e3);

            pos = pos + 150;
        }

        draw.setSize(800, 800);
        draw.setVisible(true);
        policyTab.add(draw);
        policyTab.setSize(800, 800);
        policyTab.setVisible(true);
    }//GEN-LAST:event_policyButton1ActionPerformed
    
    public void createFileList(JList<String> list) {
        AccessControlSystem program = new AccessControlSystem();
        DefaultListModel<String> model = new DefaultListModel<>();
        ArrayList<String> names = new ArrayList<>();
        
        try {
            Connection conn = program.DBConnect();
            String query = "SELECT FileName, Role from resource";
            
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet result = stmt.executeQuery();
            
            while (result.next()) {
                String name = result.getString("FileName");
                String role = result.getString("Role");
                
                names.add(name + "                                      " + role);
                
            }
        }
        catch (SQLException e){
            System.err.println("File List Error:" + e.getMessage());
        }
        
        for (String a : names) {
            model.addElement(a);
        }
        
        fileList.setModel(model);
    }
    
    private ArrayList logData(int date) throws SQLException {
        AccessControlSystem system = new AccessControlSystem();
        ArrayList<String> log = new ArrayList<String>();
        
        String query = "";
        
        if (date == 1)  {
            query = "SELECT DateOfEntry, TimeOfEntry, Entry FROM log WHERE "
                    + "DateOfEntry = curdate()";
        }
        else if (date == 2) {
            query = "SELECT DateOfEntry, TimeOfEntry, Entry FROM log WHERE "
                    + "DateOfEntry > date_sub(now(), interval 1 week)";
        }
        else if (date == 3) {
            query = "SELECT DateOfEntry, TimeOfEntry, Entry FROM log";
        }
        
        ResultSet result = system.getLog(query);
        
        while (result.next()) {
            String entryDate = result.getString("DateOfEntry");
            String entryTime = result.getString("TImeOFEntry");
            String entry = result.getString("Entry");
            
            String logText = "" + entryDate + " " + entryTime + "   " + entry;
            
            log.add(logText); 
        }
        
        return log;
        
    }
    
    public void createList(JList<String> list ) {
        AccessControlSystem program = new AccessControlSystem();
        DefaultListModel<String> model = new DefaultListModel<>();
        ArrayList<String> names = new ArrayList<>();
        
        try {
            Connection conn = program.DBConnect();
            String query = "SELECT Username, UserType, Role from login";
            
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet result = stmt.executeQuery();
            
            while (result.next()) {
                String name = result.getString("Username");
                String type = result.getString("UserType");
                String role = result.getString("Role");
                
                names.add(name + "                                " + type 
                        + "                                     " + role);
                
            }
        }
        catch (SQLException e){
            System.err.println(e);
        }
        
        for (String a : names) {
            model.addElement(a);
        }
        
        userList.setModel(model);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFileButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JPanel browseTab;
    private javax.swing.JButton changeRoleButton;
    private javax.swing.JButton editRoleButton;
    private javax.swing.JList<String> fileList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton logButton;
    private javax.swing.JPanel logTab;
    private javax.swing.JTextArea logText;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton openFileButton;
    private javax.swing.JButton policyButton1;
    private javax.swing.JPanel policyTab;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton registerButton;
    private javax.swing.JButton removeFileButton;
    private javax.swing.JButton removeUserButton;
    private javax.swing.JButton setFileRoleButton;
    private javax.swing.JList<String> userList;
    private javax.swing.JButton usersButton;
    private javax.swing.JPanel usersTab;
    private javax.swing.JPanel welcomeTab;
    // End of variables declaration//GEN-END:variables
}
